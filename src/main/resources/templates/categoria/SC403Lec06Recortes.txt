Recorte 000a
===========

 <!-- 1 Sección para crear el boton de agregar... llamará a una ventana modal-->
        <section th:fragment="botonesAgregar" class="py-4 mb-4 bg-light">
            <div class="container">
                <div class="row">
                    <div class="col-md-3">   
                        <button type="button" 
                            class="btn btn-primary btn-block" 
                            data-bs-toggle="modal" 
                            data-bs-target="#agregarCategoria">
                            <i class="fas fa-plus"></i> [[#{categoria.agregar}]]
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- 2 Fragmento para agregar categoria, es la ventana modal -->
        <section th:fragment="agregarCategoria">
            <div id="agregarCategoria" 
                 class="modal fade" 
                 tabindex="-1" 
                 aria-labelledby="exampleModalLabel" 
                 aria-hidden="true">
                <div class="modal-dialog modal-md">
                    <div class="modal-content">
                        <div class="modal-header bg-info text-white">
                            <h5 class="modal-title">[[#{categoria.agregar}]]</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div> 
                        <form th:action="@{/categoria/guardar}"
                              th:object="${categoria}"
                              method="POST" 
                              class="was-validated" 
                              enctype="multipart/form-data">
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="descripcion">[[#{categoria.descripcion}]]</label>
                                    <input type="text" class="form-control" 
                                           name="descripcion" required="true"/>
                                </div>
                                <div class="mb-3">
                                    <label for="activo">[[#{categoria.activo}]]</label>
                                    <input class="form-check-input" type="checkbox" 
                                           name="activo" id="activo"/>
                                </div>
                                <div class="mb-3">
                                    <label for="imagen">[[#{categoria.rutaImagen}]]</label>
                                    <input class="form-control" 
                                           type="file" 
                                           name="imagenFile" 
                                           onchange="readURL(this);"/>
                                    <img id="blah" src="#" alt="your image" height="200"/>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-primary" type="submit">Guardar</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </section>


        <!-- 4 Fragmento que se utiliza en la página modifca.html -->
        <section th:fragment="editarCategoria">
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-8">
                    <form method="POST"
                          th:action="@{/categoria/guardar}" 
                          th:object="${categoria}"
                          class="was-validated"                          
                          enctype="multipart/form-data">
                        <input type="hidden" name="idCategoria" th:field="*{idCategoria}"/>
                        <input type="hidden" name="rutaImagen" th:field="*{rutaImagen}"/>
                        <section th:replace="~{categoria/fragmentos :: botonesEditar}"/>
                        <div id=details>
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        <div class="card">
                                            <div class="card-header">
                                                <h4>[[#{accion.actualizar}]]</h4>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <label for="descripcion">[[#{categoria.descripcion}]]</label>
                                                    <input type="text" class="form-control" 
                                                           name="descripcion" th:field="*{descripcion}"
                                                           required="true">
                                                </div>
                                                <div class="mb-3">
                                                    <label for="activo">[[#{categoria.activo}]]</label>
                                                    <input class="form-check-input" 
                                                           type="checkbox" 
                                                           name="activo" 
                                                           id="activo"
                                                           th:field="*{activo}">
                                                </div>
                                                <div class="mb-3">
                                                    <label for="imagen">[[#{categoria.rutaImagen}]]</label>
                                                    <input class="form-control" type="file" name="imagenFile"
                                                           onchange="readURL(this);" />
                                                    <img id="blah" th:src="@{${categoria.rutaImagen}}" alt="your image" height="200"/>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    </form>
                </div>
            </div>
        </section>

        <!-- 5 Fragmento que se utiliza en el fragmento anterior -->
        <section th:fragment="botonesEditar">
            <div class="container py-4 mb-4 bg-light">
                <div class="row">
                    <div class="col-md-4 d-grid">
                        <a th:href="@{/categoria/listado}" class="btn btn-primary">
                            <i class="fas fa-arrow-left"></i> [[#{accion.regresar}]]
                        </a>
                    </div>
                    <div class="col-md-4 d-grid">                                
                        <a th:href="@{/categoria/eliminar/}+${categoria.idCategoria}"
                           class="btn btn-danger">
                            <i class="fas fa-trash"></i> [[#{accion.eliminar}]]
                        </a>
                    </div>
                    <div class="col-md-4 d-grid">
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-check"></i> [[#{accion.guardar}]]
                        </button>
                    </div>
                </div>
            </div>
        </section>



Recorte 000b
===========

<dependency>
            <groupId>com.google.firebase</groupId>
            <artifactId>firebase-admin</artifactId>
            <version>9.4.1</version>
        </dependency>  


Recorte 001
===========

import org.springframework.web.multipart.MultipartFile;

public interface FirebaseStorageService {

    public String cargaImagen(MultipartFile archivoLocalCliente, String carpeta, Long id);

    //El BuketName es el <id_del_proyecto> + ".appspot.com"
    final String BucketName = "xxidProjectxx.appspot.com";

    //Esta es la ruta básica de este proyecto Techshop
    final String rutaSuperiorStorage = "techshop";

    //Ubicación donde se encuentra el archivo de configuración Json
    final String rutaJsonFile = "firebase";
    
    //El nombre del archivo Json
    final String archivoJsonFile = "xxxNombre del archivo Json";
}



Recorte 002
===========

import com.google.auth.Credentials;
import com.google.auth.ServiceAccountSigner;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.*;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.Storage.SignUrlOption;
import com.google.cloud.storage.StorageOptions;
import com.tienda.services.FirebaseStorageService;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.TimeUnit;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FirebaseStorageServiceImpl implements FirebaseStorageService {
    @Override
    public String cargaImagen(MultipartFile archivoLocalCliente, String carpeta, Long id) {
        try {
            // El nombre original del archivo local del cliene
            String extension = archivoLocalCliente.getOriginalFilename();

            // Se genera el nombre según el código del articulo. 
            String fileName = "img" + sacaNumero(id) + extension;

            // Se convierte/sube el archivo a un archivo temporal
            File file = this.convertToFile(archivoLocalCliente);

            // se copia a Firestore y se obtiene el url válido de la imagen (por 10 años) 
            String URL = this.uploadFile(file, carpeta, fileName);

            // Se elimina el archivo temporal cargado desde el cliente
            file.delete();

            return URL;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String uploadFile(File file, String carpeta, String fileName) throws IOException {
        //Se define el lugar y acceso al archivo .jasper
        ClassPathResource json = new ClassPathResource(rutaJsonFile + File.separator + archivoJsonFile);
        BlobId blobId = BlobId.of(BucketName, rutaSuperiorStorage + "/" + carpeta + "/" + fileName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).setContentType("media").build();
        
        Credentials credentials = GoogleCredentials.fromStream(json.getInputStream());
        Storage storage = StorageOptions.newBuilder().setCredentials(credentials).build().getService();
        storage.create(blobInfo, Files.readAllBytes(file.toPath()));
        String url = storage.signUrl(blobInfo, 3650, TimeUnit.DAYS, SignUrlOption.signWith((ServiceAccountSigner) credentials)).toString();
        return url;
    }

    //Método utilitario que convierte el archivo desde el equipo local del usuario a un archivo temporal en el servidor
    private File convertToFile(MultipartFile archivoLocalCliente) throws IOException {
        File tempFile = File.createTempFile("img", null);
        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
            fos.write(archivoLocalCliente.getBytes());
            fos.close();
        }
        return tempFile;
    }

    //Método utilitario para obtener un string con ceros....
    private String sacaNumero(long id) {
        return String.format("%019d", id);
    }
}

Recorte003
==========

import com.tienda.domain.Categoria;
import java.util.List;

public interface CategoriaService {
    
    // Se obtiene un listado de categorias en un List
    public List<Categoria> getCategorias(boolean activos);
    
   // Se obtiene un Categoria, a partir del id de un categoria
    public Categoria getCategoria(Categoria categoria);
    
    // Se inserta un nuevo categoria si el id del categoria esta vacío
    // Se actualiza un categoria si el id del categoria NO esta vacío
    public void save(Categoria categoria);
    
    // Se elimina el categoria que tiene el id pasado por parámetro
    public void delete(Categoria categoria);
}


Recorte004
==========

import com.tienda.dao.CategoriaDao;
import com.tienda.domain.Categoria;
import com.tienda.services.CategoriaService;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class CategoriaServiceImpl implements CategoriaService {

    @Autowired
    private CategoriaDao categoriaDao;

    @Override
    @Transactional(readOnly = true)
    public List<Categoria> getCategorias(boolean activos) {
        var lista = categoriaDao.findAll();
        if (activos) {
            lista.removeIf(e -> !e.isActivo());
        }
        return lista;
    }

    @Override
    @Transactional(readOnly = true)
    public Categoria getCategoria(Categoria categoria) {
        return categoriaDao.findById(categoria.getIdCategoria()).orElse(null);
    }

    @Override
    @Transactional
    public void save(Categoria categoria) {
        categoriaDao.save(categoria);
    }

    @Override
    @Transactional
    public void delete(Categoria categoria) {
        categoriaDao.delete(categoria);
    }
}

Recorte005
==========

import com.tienda.domain.Categoria;
import com.tienda.services.CategoriaService;
import com.tienda.services.impl.FirebaseStorageServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping("/categoria")
public class CategoriaController {
    
    @Autowired
    private CategoriaService categoriaService;
    
    @GetMapping("/listado")
    public String listado(Model model) {
      var lista=categoriaService.getCategorias(false);
      model.addAttribute("categorias", lista);
      model.addAttribute("totalCategorias", lista.size());
      return "/categoria/listado";
    }
    
        @GetMapping("/nuevo")
    public String categoriaNuevo(Categoria categoria) {
        return "/categoria/modifica";
    }

    @Autowired
    private FirebaseStorageServiceImpl firebaseStorageService;
    
    @PostMapping("/guardar")
    public String categoriaGuardar(Categoria categoria,
            @RequestParam("imagenFile") MultipartFile imagenFile) {        
        if (!imagenFile.isEmpty()) {
            categoriaService.save(categoria);
            categoria.setRutaImagen(
                    firebaseStorageService.cargaImagen(
                            imagenFile, 
                            "categoria", 
                            categoria.getIdCategoria()));
        }
        categoriaService.save(categoria);
        return "redirect:/categoria/listado";
    }

    @GetMapping("/eliminar/{idCategoria}")
    public String categoriaEliminar(Categoria categoria) {
        categoriaService.delete(categoria);
        return "redirect:/categoria/listado";
    }

    @GetMapping("/modificar/{idCategoria}")
    public String categoriaModificar(Categoria categoria, Model model) {
        categoria = categoriaService.getCategoria(categoria);
        model.addAttribute("categoria", categoria);
        return "/categoria/modifica";
    }
}

Recorte006  (en static/js/rutinas.js)
==========
/* La siguiente función se utiliza para visualizar la imagen seleccionada en la
 * página html donde se desea "cargar" utilizando un llamado "ajax"*/
function readURL(input) {
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            $('#blah')
                    .attr('src', e.target.result)
                    .height(200);
        };
        reader.readAsDataURL(input.files[0]);
    }
}

/* La siguiente función se utiliza para activar la cantidad de elementos seleccionados
 * En el carrito de compras utilizando un llamado "ajax" */
function addCard(formulario) {
    var valor = formulario.elements[0].value;
    var url = '/carrito/agregar';
    url = url + '/' + valor;
    $("#resultsBlock").load(url);
}


Recorte007  (en plantilla.html --> línea 9 aprox)
==========

 <script th:src="@{/js/rutinas.js}"></script>